✅ Admin Area Consistency & Framework

Table Consistency (Logs)

All log tables (Email, API Errors, Products, future logs):

No vertical dividers (clean table like Email Logs).

Standard features: sortable columns, pagination, export CSV, refresh button, empty state.

Shared CSS / component file so changes apply everywhere (avoid per-page styling).

Framework: create a LogTable component → all logs import this.

Top Navigation Behavior

Tabs (Email / Analytics / Tools / Products) must switch content instantly without reloading Admin Hub.

Prevent the bug where you have to click “Admin” again.

Framework: single admin-hub.tsx wrapper with conditional rendering based on tab query param or state.

✅ Email Logs Specifics

DB vs SendGrid Switch Logic

DB mode: fetches rows from /api/admin/logs (email_logs table).

SendGrid mode: fetches direct webhook event history from SendGrid API (bypasses DB).

Add error/empty handling if SendGrid API fails.

Make this toggle consistent across log pages if we add other data sources later.

Force Alerts vs Email Testing

Email Testing: send a test template to an email (for debugging templates & delivery).

Force Alerts: simulate a real price-drop condition → trigger the full pipeline (price check → DB update → alert email).

Framework: keep Testing = isolated single email send; Force = end-to-end workflow trigger.

✅ API Error Controls

Controls (search/filter/sort/export/refresh) should match Email Logs exactly.

Same LogTable CSS → no visual drift.

Fix tab navigation so clicking “API Errors” doesn’t reset navigation back to Admin.

✅ Products Management

Remove duplicate header:

Delete “Admin Hub Comprehensive administrative control panel…” in Products tab.

Standardize Products table UI:

Move Product Data Summary above filters (same structure as logs).

Columns: Title, ASIN, Current Price, # Trackers, Emails, Last Updated, Created Date.

Match Email/API log styling.

Ensure /api/admin/products supports:

Pagination (page, limit).

Filters (by title/ASIN/email).

Sorting (sortBy, sortOrder).

Consistent JSON shape ({ data: [], pagination: {} }).